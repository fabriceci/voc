{"version":3,"sources":["App.js","index.js"],"names":["modules","words","getRatio","attempt","success","Math","round","cleanString","s","replaceAll","replace","trim","toLowerCase","cleanAndNormalize","normalize","loadGoogleSheet","a","force","result","JSON","parse","localStorage","getItem","lastSync","yesterday","Date","setDate","getDate","parseInt","getTime","doc","GoogleSpreadsheet","useApiKey","loadInfo","sheet","sheetsByIndex","getRows","rows","data","map","r","fr","undefined","es","type","module","modulesList","forEach","value","index","findIndex","e","push","includes","setItem","stringify","getStatus","status","Map","updateStatus","key","point","has","keyValue","get","attemps","error","set","App","useState","vocabulary","setVocabulary","current","setCurrent","repeat","setRepeat","repeatCount","setRepeatCount","input","setInput","setError","show","setShow","setModule","setType","tilde","setTilde","textInput","useRef","refreshData","removeItem","filterModule","readWord","message","synth","window","speechSynthesis","join","msg","SpeechSynthesisUtterance","pitch","rate","lang","voice","getVoices","find","speak","console","checkWord","useCallback","target","c","length","focus","useEffect","loadSheet","handleEnter","document","addEventListener","removeEventListener","addLetter","letter","filter","copy","sort","random","addFilter","_type","className","inputClass","currentWords","currentInput","resultForWord","onClick","onChange","checked","id","htmlFor","style","position","width","ref","onKeyPress","preventDefault","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6f0e263.chunk.js","sourcesContent":["import {useEffect, useState, useCallback, useRef} from 'react';\nimport {GoogleSpreadsheet} from 'google-spreadsheet';\n\nlet modules = []\nlet words = []\n\nconst getRatio = (attempt, success) => {\n    if (success === 0) return 0;\n    return Math.round((success / attempt) * 100 * 100) / 100\n}\n\nconst cleanString = (s) => {\n    if(!s) return ''\n    return s.replaceAll('¡', '')\n            .replaceAll('!', '')\n            .replaceAll('¿', '')\n            .replaceAll('?', '')\n            .replaceAll('.', '')\n            .replaceAll('…', '')\n            .replace(/\\s\\s+/g, ' ')\n            .trim()\n            .toLowerCase();\n}\n\nconst cleanAndNormalize = (s) => cleanString(s).normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n\nasync function loadGoogleSheet(force = false) {\n\n    let result = JSON.parse(localStorage.getItem(\"words\"));\n    if(result){\n        let lastSync = localStorage.getItem(\"lastsync\");\n        var yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        if(!lastSync || parseInt(lastSync) < yesterday.getTime()){\n            result = null;\n        }\n    }\n    if (!result || force) {\n\n        const doc = new GoogleSpreadsheet('1lA849BH1mhhAlnmhamfNnkXQVGJmEz_XpD5Fqbco5m0')\n        doc.useApiKey('AIzaSyB3fhuMVnaW77F8ZiDu_mo_xJKdKzQo6tU')\n        await doc.loadInfo();\n        const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\n        const rows = await sheet.getRows();\n        const data = rows.map(r => {\n            const data = {\n                fr: r['fr'] ? r['fr'].trim() : undefined,\n                es: r['es'] ? [r['es'].trim()] : [],\n                type: r['type'] ? r['type'].trim() : undefined,\n                module: r['module'] ? r['module'].trim() : undefined,\n            }\n            return data;\n        })\n\n        result = []\n        var modulesList = []\n        data.forEach(value => {\n            // Restructuration\n            if(value.fr){\n                var index = result.findIndex(e => e.fr === value.fr);\n                if (index === -1) {\n                    result.push(value);\n                } else {\n                    if(!result[index].es.includes(...value.es)){\n                        result[index].es.push(...value.es);\n                    }\n                }\n\n                // liste des modules\n\n                if (value.module && !modulesList.includes(value.module)) {\n                    modulesList.push(value.module);\n                }\n            }\n        })\n        // ajout dans la variable globale et dans le storage\n        localStorage.setItem(\"words\", JSON.stringify(result));\n        localStorage.setItem(\"modules\", JSON.stringify(modulesList));\n        localStorage.setItem(\"lastsync\", JSON.stringify(new Date().getTime()));\n\n    }\n\n    words = [...result];\n    modules = [...JSON.parse(localStorage.getItem(\"modules\"))]\n}\n\nconst getStatus = () => {\n    const status = JSON.parse(localStorage.getItem(\"status\"));\n    if (!status) {\n        return new Map();\n    } else {\n        return new Map(status);\n    }\n}\n\nconst updateStatus = (key, point) => {\n    let status = getStatus();\n    if (status.has(key)) {\n        var keyValue = status.get(key);\n        keyValue.attemps += 1;\n        if (point === 1) {\n            keyValue.success += 1;\n        } else {\n            keyValue.error += 1;\n        }\n        status.set(key, keyValue);\n    } else {\n        status.set(key, {attemps: 1, success: point === 1 ? 1 : 0, error: point === -1 ? 1 : 0})\n    }\n    localStorage.setItem(\"status\", JSON.stringify([...status]));\n}\n\nfunction App() {\n    const [vocabulary, setVocabulary] = useState([]);\n    const [current, setCurrent] = useState(0)\n    const [repeat, setRepeat] = useState(true)\n    const [repeatCount, setRepeatCount] = useState(0)\n    const [input, setInput] = useState('')\n    const [error, setError] = useState(false)\n    const [show, setShow] = useState(false)\n    const [module, setModule] = useState('all')\n    const [type, setType] = useState('error')\n    const [tilde, setTilde] = useState(false)\n    const textInput = useRef(null);\n\n    const refreshData = async () => {\n        setVocabulary([]);\n        localStorage.removeItem(\"words\")\n        localStorage.removeItem(\"modules\")\n        await loadGoogleSheet(true);\n        // setVocabulary([...words].sort(() => Math.random() - 0.5));\n        filterModule(module, type);\n    }\n\n    const readWord = (message) => {\n        setError(true)\n        var synth = window.speechSynthesis;\n        if (!synth) {\n            console.error(\"No speech syntesis API\");\n            return;\n        }\n\n        if (typeof message !== 'string') {\n            message = vocabulary[current].es.join(\", o ,\");\n        }\n\n        var msg = new SpeechSynthesisUtterance(message);\n        msg.pitch = 1.1;\n        msg.rate = 1;\n        msg.lang = 'es-ES'\n        var voices = speechSynthesis.getVoices();\n        var voice = voices.find(e => e.lang === 'es-ES')\n        msg.voice = voice;\n\n        synth.speak(msg);\n    }\n\n    const checkWord = useCallback(() => {\n        const value = input.toLowerCase().trim();\n        const target = vocabulary[current].es;\n        if (value.trim() === '') return;\n        if (target.map(cleanString).includes(cleanString(value))) {\n            if(repeat && (error || show) && repeatCount < 4){\n                setInput('')\n                setRepeatCount(c => c+1)\n            } else {\n                if(current + 1 === vocabulary.length){\n                    setCurrent(0)\n                    filterModule(module, type);\n                } else {\n                    setCurrent(e => e + 1);\n                }\n                setInput('')\n                setRepeatCount(0)\n                setError(false);\n                setShow(false);\n                setTilde(false);\n                updateStatus(vocabulary[current].fr, error || show ? -1 : 1)\n            }\n            if(textInput) textInput.current.focus()\n        } else {\n            setError(true);\n        }\n    }, [current, vocabulary, input]);\n\n    useEffect(() => {\n        const loadSheet = async () => {\n            await loadGoogleSheet();\n            // setVocabulary([...words].sort(() => Math.random() - 0.5));\n            filterModule('all', 'error')\n        }\n\n        loadSheet();\n\n    }, [])\n\n    useEffect(() => {\n        const handleEnter = function (e) {\n            if (e.key === '@') {\n                setShow(e => true)\n            }\n            if (e.key === 'Control') {\n                readWord()\n            }\n            if (e.key === 'Enter') {\n                checkWord();\n            }\n        }\n\n        document.addEventListener('keydown', handleEnter);\n        return () => {\n            document.removeEventListener('keydown', handleEnter);\n        };\n    }, [checkWord])\n\n    useEffect(() => {\n        if (tilde === true) {\n            readWord(\"¿Dónde está la tilde?\")\n        }\n    }, [tilde])\n\n    const nextWord = () => {\n        if(current + 1 === vocabulary.length){\n            setCurrent(0)\n            filterModule(module, type);\n        } else {\n            setCurrent(e => e + 1);\n        }\n        setInput('')\n        setShow(false);\n        setError(false);\n        setTilde(false);\n        updateStatus(vocabulary[current].fr, -1)\n        if(textInput) textInput.current.focus()\n    }\n\n    const addLetter = (letter) => {\n        setInput(input => input += letter)\n        if(textInput) textInput.current.focus()\n    }\n\n    const filterModule = (module, filter) => {\n        var result = []\n        if (module === 'all') {\n            result = [...words];\n        } else {\n            result = words.filter(e => e.module === module);\n        }\n        const status = getStatus()\n        var copy = [...result]\n        if (filter === 'error') {\n            result = result.filter(e => !status.has(e.fr) || getRatio(status.get(e.fr).attemps, status.get(e.fr).success) < 80);\n        } else if (filter === 'error-only') {\n            result = result.filter(e => status.has(e.fr) && getRatio(status.get(e.fr).attemps, status.get(e.fr).success) < 80);\n        }\n\n        if(result.length === 0 ){\n            setType('all');\n            result = copy;\n        }\n        setCurrent(0)\n        setVocabulary(result.sort(() => Math.random() - 0.5));\n    }\n\n    const addFilter = (_type, value) => {\n        if (_type === 'module') {\n            setModule(value)\n            filterModule(value, type);\n\n        } else {\n            setType(value)\n            filterModule(module, value)\n\n        }\n    }\n\n    if (vocabulary.length === 0) {\n        return <div className=\"loader\">\n            <div>chargement...</div>\n            <div className=\"lds-ripple\">\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    }\n\n    var inputClass = 'mainInput';\n    var currentWords = vocabulary[current].es.map(cleanString);\n    var currentInput = cleanString(input);\n    if (error) inputClass += ' error';\n    if (error && currentWords.includes(currentInput)) {\n        inputClass += ' success'\n    } else if (error && currentWords.map(cleanAndNormalize).includes(cleanAndNormalize(currentInput))) {\n        inputClass += ' warning'\n        if (!tilde) {\n            setTilde(true)\n        }\n\n    }\n\n    const handleTextarea = (e) => {\n        if(e.key === 'Enter'){\n            e.preventDefault();\n            checkWord();\n        }\n    }\n    const resultForWord = getStatus().get(vocabulary[current].fr);\n    return (\n        <div className=\"App\">\n            <div className=\"status\">\n                <div>{current + 1}/{vocabulary.length}</div>\n                <div>\n                    <div className=\"btn btn-info btn-refresh\" onClick={refreshData}>mettre à jour les données</div>\n                </div>\n                <div>\n                    <div>\n                        <select value={module} onChange={(e) => addFilter('module', e.target.value)}>\n                            <option key=\"all\" value=\"all\">Tous les modules</option>\n                            {\n                                modules.map(e => <option key={e}>{e}</option>)\n                            }\n                        </select>\n                    </div>\n                    <div>\n                        <select value={type} onChange={(e) => addFilter('type', e.target.value)}>\n                            <option key=\"all\" value=\"all\">pas de filtre</option>\n                            <option key=\"error\" value=\"error\">nouveaux et erreurs</option>\n                            <option key=\"error-only\" value=\"error-only\">juste les erreurs</option>\n                        </select>\n                    </div>\n                    <div>\n                        <input onChange={() => setRepeat(e => !e)} checked={repeat} type=\"checkbox\" className=\"form-check-input\" id=\"repeatMode\"/>\n                        <label className=\"form-check-label\" htmlFor=\"repeatMode\">Répeter en cas d'erreur</label>\n                    </div>\n                </div>\n            </div>\n            <div style={{position: 'relative'}}>\n                <div className=\"help-message\">Aide à la saisie, cliquez sur une lettre pour l'ajouter</div>\n                <div className=\"helper\">\n                    <li><kbd onClick={() => addLetter('ñ')}>ñ</kbd></li>\n                    <li><kbd onClick={() => addLetter('á')}>á</kbd></li>\n                    <li><kbd onClick={() => addLetter('ó')}>ó</kbd></li>\n                    <li><kbd onClick={() => addLetter('í')}>í</kbd></li>\n                    <li><kbd onClick={() => addLetter('ú')}>ú</kbd></li>\n                </div>\n            </div>\n\n            <div className=\"statistics\">\n                <div>{ vocabulary[current].es.length > 1 && vocabulary[current].es.length + \" possibilités\" }</div>\n                {repeat && (show || error) && <div>\n                    {repeatCount}/5\n                    </div>\n                }\n                <div>\n                {resultForWord ? getRatio(resultForWord.attemps, resultForWord.success) + ' % de réussite' : 'nouveau'} | {vocabulary[current].module}\n                </div>\n            </div>\n            <div className=\"currentWord alert alert-info\">{vocabulary[current].fr}</div>\n\n\n            <div className=\"input-group mb-3\" style={{width: '100%'}}>\n                <textarea ref={textInput} className={inputClass} type=\"text\" value={input}\n                       onKeyPress={handleTextarea} onChange={(e) => setInput(e.target.value)}>{input}</textarea>\n                <div className=\"input-group-append\">\n                    <button onClick={checkWord} className=\"btn btn-primary\">Valider</button>\n                </div>\n            </div>\n            {show &&\n            <p className=\"answer\">{vocabulary[current].es.join(', ')}</p>\n            }\n\n            <div className=\"solutions\">\n                {!show &&\n                <button key=\"show\" className=\"btn btn-danger\" onClick={() => setShow(true)}>🕶 Voir la réponse</button>\n                }\n                {show &&\n                <button key=\"next\" className=\"btn btn-danger\" onClick={nextWord}>Next</button>\n                }\n                <button key=\"read\" className=\"btn btn-warning\" onClick={readWord}>Écouter la\n                    réponse 🔊\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}